HiSpider软件设计思路



M对一次抓取操作数据进行封装(我已经把文件保存的控制器集成到模型类了，后面可以移出来)

V模型渲染到窗口

C调用V函数将M渲染到窗口，V调用FC存储模型

进度
V只有一个简单的图形界面
C只有一个FC(配置文件读写，普通文件读写，diclist读写)
M模型储存了html源文件，diclist读写

每一步操作都是独立的，目的是加快渲染速度，而不用等待全部操作完成，增加反馈次数



计划
首先分解整个流程
第一阶段(1):获取数据
输入url点击获取(文本输入框和按钮)
创建数据模型并添加到缓存队列
获取html
保存到文件
渲染完整html到窗口1(抽屉窗口1)

重点流程
解析有价值的html树存节点
对节点进行分组
(关键是分组规则，什么样的节点一组？组名是什么？
组名代表了这一个字典列表的内容，比如说标题，文章入口等
并且这里创建的应该是字典列表类型，后面才方便保存。

假设抓取的页面是新闻页面，一个节点中有大量子节点，子节点文本和url很容易被提取出来装进一个元组，
然后还需要用户根据这个元组的个数生成字典的键，加上这个值创建字典，最后生成字典列表
这个步骤中有一个需要人工介入的环节，设置字典的值，
当然后面可以根据父节点进行分析得出，还可以用创建机器学习模型对数据进行分类)

渲染节点到窗口2(多选框，输入框。在初期阶段，还需要人工介入设置字典(组)的名字，和字典键，后面在优化，)
选择需要的节点组
点击按钮存储到文件(最后要获取的是字典列表)

添加到本地模型列表

第一阶段(2):读取本地模型进行操作(选择模型更换当前渲染模型)
从历史记录中，双击指定模型
实例化数据模型
(二次读取操作，主要重新执行对节点的选择和保存操作)
检查内存中(创建一个固定长度的缓存队列，新抓取的模型储存到该队列)是否有该模型，如果有直接创建模型，如果没有则从本地加载到模型，并添加到模型缓存队列

在从模型渲染到窗口
第一阶段(3):删除本地模型
右键模型本地模型列表中的元素，点击删除
从本地删除相关文件夹并从缓存队列和本地模型列表中删除元素

第二阶段:数据分析